import streamlit as st
import random
import string
import time

# === Yardƒ±mcƒ± Fonksiyonlar ===
def analyze_password(password):
    """≈ûifrenin g√ºc√ºn√º analiz eder."""
    score = 0
    length = len(password)
    
    # Uzunluk skoru
    if length >= 16:
        score += 3
    elif length >= 12:
        score += 2
    elif length >= 8:
        score += 1
    
    # Karakter t√ºr√º kontrolleri
    if any(c.islower() for c in password):
        score += 1
    if any(c.isupper() for c in password):
        score += 1
    if any(c.isdigit() for c in password):
        score += 1
    if any(c in string.punctuation for c in password):
        score += 2
    
    # G√º√ß seviyesini belirle
    if score <= 3:
        level = "üî¥ Zayƒ±f"
    elif score <= 5:
        level = "üü° Orta"
    elif score <= 7:
        level = "üü¢ G√º√ßl√º"
    else:
        level = "üü¢ √áok G√º√ßl√º"
    
    return score, level

def generate_password(strength_level):
    """Se√ßilen g√º√ß seviyesine g√∂re ≈üifre olu≈üturur."""
    lower = string.ascii_lowercase
    upper = string.ascii_uppercase
    digits = string.digits
    symbols = string.punctuation
    
    if strength_level == "Zayƒ±f":
        length = 8
        pool = lower + upper + digits
    elif strength_level == "Orta":
        length = 12
        pool = lower + upper + digits + symbols
    elif strength_level == "G√º√ßl√º":
        length = 16
        pool = lower + upper + digits + symbols
    else:  # √áok G√º√ßl√º
        length = 20
        pool = lower + upper + digits + symbols
    
    return ''.join(random.choice(pool) for _ in range(length))

# === Streamlit UI ===
st.set_page_config(page_title="üîê G√º√ßl√º ≈ûifre Aracƒ±", page_icon="üîê", layout="centered")
st.title("üîê G√º√ßl√º ≈ûifre Aracƒ±")
st.markdown("---")

# Mod se√ßimi
mode = st.selectbox("Bir se√ßenek belirleyin:", ["≈ûifre G√ºc√ºn√º Kontrol Et", "≈ûifre Olu≈ütur"])

# === ≈ûƒ∞FRE KONTROL MODU ===
if mode == "≈ûifre G√ºc√ºn√º Kontrol Et":
    st.subheader("üîç ≈ûifre G√ºc√º Kontrol√º")
    password = st.text_input("≈ûifrenizi girin:", type="password", placeholder="≈ûifrenizi buraya yazƒ±n...")
    
    if st.button("Kontrol Et"):
        if password:
            score, level = analyze_password(password)
            st.success(f"**Sonu√ß:** {level}  |  **Skor:** {score}/8")
        else:
            st.warning("‚ö†Ô∏è L√ºtfen √∂nce bir ≈üifre girin.")

# === ≈ûƒ∞FRE OLU≈ûTURMA MODU ===
elif mode == "≈ûifre Olu≈ütur":
    st.subheader("üé≤ Otomatik ≈ûifre Olu≈üturucu")
    
    strength = st.selectbox("≈ûifre g√ºc√ºn√º se√ßin:", ["Zayƒ±f", "Orta", "G√º√ßl√º", "√áok G√º√ßl√º"])
    amount = st.slider("Ka√ß adet ≈üifre olu≈üturmak istiyorsunuz?", 1, 10, 3)
    
    if st.button("Olu≈ütur"):
        progress = st.progress(0)
        placeholders = [st.empty() for _ in range(amount)]
        
        # Animasyonlu sahte ≈üifreler
        for i in range(10):
            for p in placeholders:
                fake = generate_password(strength)
                p.code("*" * len(fake), language="text")
            progress.progress((i + 1) * 10)
            time.sleep(0.1)
        
        progress.empty()
        for p in placeholders:
            p.empty()
        
        st.markdown("### ‚úÖ Olu≈üturulan ≈ûifreler:")
        
        # Session state'de ≈üifreleri sakla
        if 'passwords' not in st.session_state:
            st.session_state.passwords = []
        
        st.session_state.passwords = []
        for i in range(amount):
            password = generate_password(strength)
            score, level = analyze_password(password)
            st.session_state.passwords.append({
                'password': password,
                'score': score,
                'level': level,
                'index': i
            })
        
        # Her ≈üifre i√ßin ayrƒ± g√∂ster/gizle ve kopyala butonu
        for pwd_data in st.session_state.passwords:
            i = pwd_data['index']
            password = pwd_data['password']
            score = pwd_data['score']
            level = pwd_data['level']
            
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                # ≈ûifre g√∂sterme durumunu kontrol et
                show_key = f'show_pwd_{i}'
                if show_key not in st.session_state:
                    st.session_state[show_key] = False
                
                if st.session_state[show_key]:
                    st.code(password, language="text")
                else:
                    st.code("*" * len(password), language="text")
            
            with col2:
                if st.button("üëÅÔ∏è G√∂ster" if not st.session_state[show_key] else "üôà Gizle", key=f'btn_{i}'):
                    st.session_state[show_key] = not st.session_state[show_key]
                    st.rerun()
            
            with col3:
                # Kopyalama i√ßin metin g√∂ster
                if st.session_state[show_key]:
                    st.button("üìã Kopyala", key=f'copy_{i}', help="≈ûifreyi manuel olarak kopyalayƒ±n")
            
            st.write(f"**G√º√ß:** {level}  |  **Skor:** {score}/8")
            st.markdown("---")
